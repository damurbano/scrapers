import requests  # üï∏Ô∏è Solicitudes HTTP
import re  # üßô‚Äç‚ôÇÔ∏è Expresiones regulares, la varita m√°gica para buscar patrones en el HTML
import math  # üßÆ Matem√°ticas para calcular cu√°ntas p√°ginas hay en total

# URL base de Mercado Libre.
URL_BASE = "https://listado.mercadolibre.com.ar/"

# Mercado Libre nos muestra 50 productos por p√°gina, as√≠ que lo guardamos como una constante
PRODUCTS_PER_PAGE = 50


def get_total_results(html: str):
    """Saca el n√∫mero total de resultados de la b√∫squeda usando expresiones regulares"""
    # Cantidad de resultados dentro del HTML. B√°sicamente, estamos buscando cu√°ntos productos hay.
    pattern = re.compile(
        r'<span class="ui-search-search-result__quantity-results">([\d\.,]+) resultados</span>'
    )

    # Buscando el patr√≥n en el HTML
    match = pattern.search(html)

    if match:
        # group(1) devuelve lo que coincidi√≥ con el primer grupo entre par√©ntesis. En este caso, la expresi√≥n regular tiene un grupo ([\d\.,]+) que busca el n√∫mero total de resultados (n√∫meros con puntos o comas).
        total_results_str = match.group(1)
        # El n√∫mero a entero
        total_results = int(total_results_str.replace(".", "").replace(",", ""))
        return total_results
    print("No se encontr√≥ el n√∫mero total de resultados en el HTML.")
    return 0


def extract_products_and_prices(html: str):
    """Extrae los nombres de los productos y sus precios"""
    # Los nombres de los productos
    product_pattern = re.compile(
        r'<h2 class="poly-box poly-component__title"><a[^>]*>(.*?)</a></h2>', re.DOTALL
    )

    # Precios de los productos, pero solo los que no est√°n en "buy box"
    price_pattern = re.compile(
        r'<div class="poly-price__current">.*?<span class="andes-money-amount__fraction" aria-hidden="true">([\d.,]+)</span>',
        re.DOTALL,
    )

    # Expresi√≥n regular especial para los precios que s√≠ est√°n en la "buy box" (no queremos duplicados)
    buy_box_pattern = re.compile(
        r'<div class="poly-component__buy-box">.*?<div class="poly-price__current">.*?<span class="andes-money-amount__fraction" aria-hidden="true">([\d.,]+)</span>',
        re.DOTALL,
    )

    # Buscar todos los productos y precios en el HTML:
    products = product_pattern.findall(html)
    buy_box_prices = buy_box_pattern.findall(html)
    all_prices = price_pattern.findall(html)

    # Limpiamos los precios que est√°n en la "buy box" para que no los contemos dos veces. Buy box basicamente muestra Otra opcion de compra por otro precio. Asique lo estamos obviando para que no nos corra el indice
    filtered_prices = [price for price in all_prices if price not in buy_box_prices]

    # Lista de productos y precios
    return products, filtered_prices


def scrape_all_pages(query: str):
    """Recorre todas las p√°ginas de resultados, buscando productos y precios"""
    # Reemplaza espacios con guiones medios porque la web no entiende espacios)
    search_query = query.replace(" ", "-")
    url = f"{URL_BASE}{search_query}#D[A:{search_query}]"
    try:
        # üöÄ Primera solicitud: b√∫squeda a la URL
        response = requests.get(url, timeout=300)
        html = response.text

        # N√∫mero total de resultados
        total_results = get_total_results(html)
        if total_results == 0:
            print("No se encontraron resultados.")
            return

        print(f"Total de resultados: {total_results}")

        # üßÆ Se calcula cu√°ntas p√°ginas necesitamos ver bas√°ndonos en el total de productos y los productos por p√°gina

        # La funci√≥n math.ceil() se utiliza para redondear un n√∫mero decimal al entero m√°s cercano por arriba. Es decir, si ten√©s un n√∫mero con decimales y quer√©s asegurarte de que siempre sea "redondeado hacia arriba", aunque la parte decimal sea peque√±a, math.ceil() es la funci√≥n ideal.

        # Por ejemplo:

        #     math.ceil(3.2) te d√° 4.
        #     math.ceil(7.9) te d√° 8.
        #     math.ceil(5.0) te d√° 5 (ya que no tiene decimales).

        total_pages = math.ceil(total_results / PRODUCTS_PER_PAGE)
        all_products = []
        all_prices = []
        # Para la primera iteraci√≥n, page va a ser 1:
        for page in range(1, total_pages + 1):
            if page == 1:
                page_url = (
                    url  # La primera p√°gina siempre es la misma URL que ya tenemos
                )
            else:
                # Para las dem√°s p√°ginas, ajustamos la URL con un "offset" (b√°sicamente, saltamos productos ya vistos)
                offset = (page - 1) * PRODUCTS_PER_PAGE + 1
                page_url = f"https://listado.mercadolibre.com.ar/{search_query}_Desde_{offset}_NoIndex_True"

            print(f"Scraping p√°gina {page}: {page_url}")

            # P√°gina actual
            response = requests.get(page_url, timeout=300)
            html = response.text

            # Extraemos los productos y precios:
            products, prices = extract_products_and_prices(html)
            all_products.extend(products)  # Productos a lista de productos
            all_prices.extend(prices)  # Lo mismo con los precios

        print(len(all_products), "PRODUCTOS ENCONTRADOS \n")
        print(len(set(all_products)), "PRODUCTOS √öNICOS")

        for product, price in zip(all_products, all_prices):
            formatted_price = price.replace(".", ",")
            print(f"Producto: {product.strip()}, Precio: ${formatted_price}")

    except requests.exceptions.ConnectTimeout as error:
        print("Error de conexi√≥n", error)


# A probar!!
search = input("Introduce el art√≠culo a buscar: ")
scrape_all_pages(search)
